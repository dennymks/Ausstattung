
blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003658  08003658  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08003658  08003658  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003658  08003658  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003658  08003658  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000410  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000100ce  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c18  00000000  00000000  00030151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00032d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a3f  00000000  00000000  00033b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217a7  00000000  00000000  0003454f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f6af  00000000  00000000  00055cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1107  00000000  00000000  000653a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003778  00000000  00000000  001364ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00139c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003640 	.word	0x08003640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003640 	.word	0x08003640

080001d0 <LED_Init>:
#include "blinker_led.h"


//---Initalisierungsfunktion---

void LED_Init(void){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08e      	sub	sp, #56	; 0x38
 80001d4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]
	//Clock für Ports aktivieren

	if (LED_PORT_LINKS == GPIOA){ __HAL_RCC_GPIOA_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOB){ __HAL_RCC_GPIOB_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOC){ __HAL_RCC_GPIOC_CLK_ENABLE();}
	else if (LED_PORT_LINKS == GPIOD){ __HAL_RCC_GPIOD_CLK_ENABLE();}
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	4b3c      	ldr	r3, [pc, #240]	; (80002dc <LED_Init+0x10c>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	4a3b      	ldr	r2, [pc, #236]	; (80002dc <LED_Init+0x10c>)
 80001f0:	f043 0308 	orr.w	r3, r3, #8
 80001f4:	6313      	str	r3, [r2, #48]	; 0x30
 80001f6:	4b39      	ldr	r3, [pc, #228]	; (80002dc <LED_Init+0x10c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	697b      	ldr	r3, [r7, #20]

	if (LED_PORT_RECHTS == GPIOA){ __HAL_RCC_GPIOA_CLK_ENABLE();}
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
 8000206:	4b35      	ldr	r3, [pc, #212]	; (80002dc <LED_Init+0x10c>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020a:	4a34      	ldr	r2, [pc, #208]	; (80002dc <LED_Init+0x10c>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6313      	str	r3, [r2, #48]	; 0x30
 8000212:	4b32      	ldr	r3, [pc, #200]	; (80002dc <LED_Init+0x10c>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	613b      	str	r3, [r7, #16]
 800021c:	693b      	ldr	r3, [r7, #16]

	//Konfiguartion Blinker Links

	//Konfiguration für rote LED

	GPIO_InitStruct.Pin = RED_LED_PIN;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	2300      	movs	r3, #0
 800022e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 8000230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000234:	4619      	mov	r1, r3
 8000236:	482a      	ldr	r0, [pc, #168]	; (80002e0 <LED_Init+0x110>)
 8000238:	f000 fa74 	bl	8000724 <HAL_GPIO_Init>

	// Konfiguration für grüne LED

    GPIO_InitStruct.Pin = GREEN_LED_PIN;
 800023c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	2301      	movs	r3, #1
 8000244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 800024e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000252:	4619      	mov	r1, r3
 8000254:	4822      	ldr	r0, [pc, #136]	; (80002e0 <LED_Init+0x110>)
 8000256:	f000 fa65 	bl	8000724 <HAL_GPIO_Init>

	// Konfiguration für blaue LED

    GPIO_InitStruct.Pin = BLUE_LED_PIN;
 800025a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	2300      	movs	r3, #0
 8000266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000268:	2300      	movs	r3, #0
 800026a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_LINKS, &GPIO_InitStruct);
 800026c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000270:	4619      	mov	r1, r3
 8000272:	481b      	ldr	r0, [pc, #108]	; (80002e0 <LED_Init+0x110>)
 8000274:	f000 fa56 	bl	8000724 <HAL_GPIO_Init>

    //Konfiguartion Blinker Rechts

    //Konfiguration für rote LED

    GPIO_InitStruct.Pin = RED_LED_PIN;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
   	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
   	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
   	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 800028a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800028e:	4619      	mov	r1, r3
 8000290:	4814      	ldr	r0, [pc, #80]	; (80002e4 <LED_Init+0x114>)
 8000292:	f000 fa47 	bl	8000724 <HAL_GPIO_Init>

   	// Konfiguration für grüne LED

    GPIO_InitStruct.Pin = GREEN_LED_PIN;
 8000296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800029a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 80002a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LED_Init+0x114>)
 80002b0:	f000 fa38 	bl	8000724 <HAL_GPIO_Init>

    // Konfiguration für blaue LED

    GPIO_InitStruct.Pin = BLUE_LED_PIN;
 80002b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_PORT_RECHTS, &GPIO_InitStruct);
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	4619      	mov	r1, r3
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <LED_Init+0x114>)
 80002ce:	f000 fa29 	bl	8000724 <HAL_GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3738      	adds	r7, #56	; 0x38
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020c00 	.word	0x40020c00
 80002e4:	40020000 	.word	0x40020000

080002e8 <main>:
#include "stm32f4xx_hal.h"
#include "blinker_led.h"


int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    HAL_Init();
 80002ec:	f000 f89e 	bl	800042c <HAL_Init>

    LED_Init();
 80002f0:	f7ff ff6e 	bl	80001d0 <LED_Init>

    while (1)
    {
    	//LED_AlternateColour(BLUE, ORANGE, BLINKERRECHTS);
    	//LED_Toggle(WHITE, BLINKERRECHTS);
    	HAL_Delay(750);
 80002f4:	f240 20ee 	movw	r0, #750	; 0x2ee
 80002f8:	f000 f90a 	bl	8000510 <HAL_Delay>
 80002fc:	e7fa      	b.n	80002f4 <main+0xc>
	...

08000300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <HAL_MspInit+0x54>)
 800030c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030e:	4a11      	ldr	r2, [pc, #68]	; (8000354 <HAL_MspInit+0x54>)
 8000310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000314:	6453      	str	r3, [r2, #68]	; 0x44
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <HAL_MspInit+0x54>)
 8000318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <HAL_MspInit+0x54>)
 8000328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <HAL_MspInit+0x54>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	6413      	str	r3, [r2, #64]	; 0x40
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <HAL_MspInit+0x54>)
 8000334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	210f      	movs	r1, #15
 8000342:	f06f 0001 	mvn.w	r0, #1
 8000346:	f000 f9c4 	bl	80006d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800035c:	e7fe      	b.n	800035c <NMI_Handler+0x4>

0800035e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <HardFault_Handler+0x4>

08000364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <MemManage_Handler+0x4>

0800036a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <BusFault_Handler+0x4>

08000370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <UsageFault_Handler+0x4>

08000376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000388:	f000 f8a2 	bl	80004d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800038c:	f002 fe76 	bl	800307c <xTaskGetSchedulerState>
 8000390:	4603      	mov	r3, r0
 8000392:	2b01      	cmp	r3, #1
 8000394:	d001      	beq.n	800039a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000396:	f003 f81f 	bl	80033d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <OTG_FS_IRQHandler+0x10>)
 80003a6:	f000 fb59 	bl	8000a5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000011c 	.word	0x2000011c

080003b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <SystemInit+0x20>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <SystemInit+0x20>)
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003de:	490e      	ldr	r1, [pc, #56]	; (8000418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003e0:	4a0e      	ldr	r2, [pc, #56]	; (800041c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003f4:	4c0b      	ldr	r4, [pc, #44]	; (8000424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000402:	f7ff ffd7 	bl	80003b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000406:	f003 f8e9 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040a:	f7ff ff6d 	bl	80002e8 <main>
  bx  lr    
 800040e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800041c:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 8000420:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000424:	20000420 	.word	0x20000420

08000428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC_IRQHandler>
	...

0800042c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_Init+0x40>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <HAL_Init+0x40>)
 8000436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <HAL_Init+0x40>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <HAL_Init+0x40>)
 8000442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_Init+0x40>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_Init+0x40>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 f931 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800045a:	200f      	movs	r0, #15
 800045c:	f000 f808 	bl	8000470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000460:	f7ff ff4e 	bl	8000300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40023c00 	.word	0x40023c00

08000470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_InitTick+0x54>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_InitTick+0x58>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000486:	fbb3 f3f1 	udiv	r3, r3, r1
 800048a:	fbb2 f3f3 	udiv	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f93b 	bl	800070a <HAL_SYSTICK_Config>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e00e      	b.n	80004bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	d80a      	bhi.n	80004ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a4:	2200      	movs	r2, #0
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ac:	f000 f911 	bl	80006d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b0:	4a06      	ldr	r2, [pc, #24]	; (80004cc <HAL_InitTick+0x5c>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e000      	b.n	80004bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000008 	.word	0x20000008
 80004cc:	20000004 	.word	0x20000004

080004d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_IncTick+0x20>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_IncTick+0x24>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_IncTick+0x24>)
 80004e2:	6013      	str	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000008 	.word	0x20000008
 80004f4:	2000002c 	.word	0x2000002c

080004f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return uwTick;
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <HAL_GetTick+0x14>)
 80004fe:	681b      	ldr	r3, [r3, #0]
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c

08000510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff ffee 	bl	80004f8 <HAL_GetTick>
 800051c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000528:	d005      	beq.n	8000536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_Delay+0x44>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000536:	bf00      	nop
 8000538:	f7ff ffde 	bl	80004f8 <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d8f7      	bhi.n	8000538 <HAL_Delay+0x28>
  {
  }
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000008 	.word	0x20000008

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	; 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3b01      	subs	r3, #1
 8000684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000688:	d301      	bcc.n	800068e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2301      	movs	r3, #1
 800068c:	e00f      	b.n	80006ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <SysTick_Config+0x40>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000696:	210f      	movs	r1, #15
 8000698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800069c:	f7ff ff8e 	bl	80005bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <SysTick_Config+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <SysTick_Config+0x40>)
 80006a8:	2207      	movs	r2, #7
 80006aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010

080006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff47 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e4:	f7ff ff5c 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 80006e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff ff8e 	bl	8000610 <NVIC_EncodePriority>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff5d 	bl	80005bc <__NVIC_SetPriority>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffb0 	bl	8000678 <SysTick_Config>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
 800073e:	e16b      	b.n	8000a18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000740:	2201      	movs	r2, #1
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	429a      	cmp	r2, r3
 800075a:	f040 815a 	bne.w	8000a12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b01      	cmp	r3, #1
 8000768:	d005      	beq.n	8000776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000772:	2b02      	cmp	r3, #2
 8000774:	d130      	bne.n	80007d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	2203      	movs	r2, #3
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	4013      	ands	r3, r2
 800078c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	4313      	orrs	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ac:	2201      	movs	r2, #1
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	091b      	lsrs	r3, r3, #4
 80007c2:	f003 0201 	and.w	r2, r3, #1
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d017      	beq.n	8000814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2203      	movs	r2, #3
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4313      	orrs	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 0303 	and.w	r3, r3, #3
 800081c:	2b02      	cmp	r3, #2
 800081e:	d123      	bne.n	8000868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	08da      	lsrs	r2, r3, #3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3208      	adds	r2, #8
 8000828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	220f      	movs	r2, #15
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	691a      	ldr	r2, [r3, #16]
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4313      	orrs	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	69b9      	ldr	r1, [r7, #24]
 8000864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0203 	and.w	r2, r3, #3
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4313      	orrs	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f000 80b4 	beq.w	8000a12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <HAL_GPIO_Init+0x30c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a5f      	ldr	r2, [pc, #380]	; (8000a30 <HAL_GPIO_Init+0x30c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <HAL_GPIO_Init+0x30c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008c6:	4a5b      	ldr	r2, [pc, #364]	; (8000a34 <HAL_GPIO_Init+0x310>)
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	3302      	adds	r3, #2
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	220f      	movs	r2, #15
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4013      	ands	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <HAL_GPIO_Init+0x314>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d02b      	beq.n	800094a <HAL_GPIO_Init+0x226>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <HAL_GPIO_Init+0x318>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d025      	beq.n	8000946 <HAL_GPIO_Init+0x222>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a50      	ldr	r2, [pc, #320]	; (8000a40 <HAL_GPIO_Init+0x31c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d01f      	beq.n	8000942 <HAL_GPIO_Init+0x21e>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <HAL_GPIO_Init+0x320>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d019      	beq.n	800093e <HAL_GPIO_Init+0x21a>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <HAL_GPIO_Init+0x324>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d013      	beq.n	800093a <HAL_GPIO_Init+0x216>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a4d      	ldr	r2, [pc, #308]	; (8000a4c <HAL_GPIO_Init+0x328>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d00d      	beq.n	8000936 <HAL_GPIO_Init+0x212>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a4c      	ldr	r2, [pc, #304]	; (8000a50 <HAL_GPIO_Init+0x32c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d007      	beq.n	8000932 <HAL_GPIO_Init+0x20e>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a4b      	ldr	r2, [pc, #300]	; (8000a54 <HAL_GPIO_Init+0x330>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_GPIO_Init+0x20a>
 800092a:	2307      	movs	r3, #7
 800092c:	e00e      	b.n	800094c <HAL_GPIO_Init+0x228>
 800092e:	2308      	movs	r3, #8
 8000930:	e00c      	b.n	800094c <HAL_GPIO_Init+0x228>
 8000932:	2306      	movs	r3, #6
 8000934:	e00a      	b.n	800094c <HAL_GPIO_Init+0x228>
 8000936:	2305      	movs	r3, #5
 8000938:	e008      	b.n	800094c <HAL_GPIO_Init+0x228>
 800093a:	2304      	movs	r3, #4
 800093c:	e006      	b.n	800094c <HAL_GPIO_Init+0x228>
 800093e:	2303      	movs	r3, #3
 8000940:	e004      	b.n	800094c <HAL_GPIO_Init+0x228>
 8000942:	2302      	movs	r3, #2
 8000944:	e002      	b.n	800094c <HAL_GPIO_Init+0x228>
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x228>
 800094a:	2300      	movs	r3, #0
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	f002 0203 	and.w	r2, r2, #3
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	4093      	lsls	r3, r2
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4313      	orrs	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800095c:	4935      	ldr	r1, [pc, #212]	; (8000a34 <HAL_GPIO_Init+0x310>)
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800096a:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <HAL_GPIO_Init+0x334>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	43db      	mvns	r3, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4013      	ands	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <HAL_GPIO_Init+0x334>)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_GPIO_Init+0x334>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	43db      	mvns	r3, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <HAL_GPIO_Init+0x334>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <HAL_GPIO_Init+0x334>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_GPIO_Init+0x334>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_GPIO_Init+0x334>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_GPIO_Init+0x334>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3301      	adds	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	f67f ae90 	bls.w	8000740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40021400 	.word	0x40021400
 8000a50:	40021800 	.word	0x40021800
 8000a54:	40021c00 	.word	0x40021c00
 8000a58:	40013c00 	.word	0x40013c00

08000a5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fa0f 	bl	8001e96 <USB_GetMode>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	f040 80f6 	bne.w	8000c6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 f9f3 	bl	8001e70 <USB_ReadInterrupts>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 80ec 	beq.w	8000c6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f9ea 	bl	8001e70 <USB_ReadInterrupts>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000aa6:	d104      	bne.n	8000ab2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f9da 	bl	8001e70 <USB_ReadInterrupts>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ac6:	d104      	bne.n	8000ad2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ad0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 f9ca 	bl	8001e70 <USB_ReadInterrupts>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ae6:	d104      	bne.n	8000af2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f9ba 	bl	8001e70 <USB_ReadInterrupts>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d103      	bne.n	8000b0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f9ac 	bl	8001e70 <USB_ReadInterrupts>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b22:	d11c      	bne.n	8000b5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000b3e:	2110      	movs	r1, #16
 8000b40:	6938      	ldr	r0, [r7, #16]
 8000b42:	f001 f8d9 	bl	8001cf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000b46:	6938      	ldr	r0, [r7, #16]
 8000b48:	f001 f90a 	bl	8001d60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f9ad 	bl	8001eb2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f002 fcbb 	bl	80034d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f984 	bl	8001e70 <USB_ReadInterrupts>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b72:	d102      	bne.n	8000b7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f001 f829 	bl	8001bcc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f976 	bl	8001e70 <USB_ReadInterrupts>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d106      	bne.n	8000b9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f002 fc84 	bl	800349c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2208      	movs	r2, #8
 8000b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 f965 	bl	8001e70 <USB_ReadInterrupts>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	2b10      	cmp	r3, #16
 8000bae:	d101      	bne.n	8000bb4 <HAL_HCD_IRQHandler+0x158>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_HCD_IRQHandler+0x15a>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d012      	beq.n	8000be0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0210 	bic.w	r2, r2, #16
 8000bc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 ff2c 	bl	8001a28 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	699a      	ldr	r2, [r3, #24]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0210 	orr.w	r2, r2, #16
 8000bde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 f943 	bl	8001e70 <USB_ReadInterrupts>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000bf4:	d13a      	bne.n	8000c6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f993 	bl	8001f26 <USB_HC_ReadInterrupt>
 8000c00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e025      	b.n	8000c54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d018      	beq.n	8000c4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	015a      	lsls	r2, r3, #5
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c32:	d106      	bne.n	8000c42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f836 	bl	8000cac <HCD_HC_IN_IRQHandler>
 8000c40:	e005      	b.n	8000c4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fb84 	bl	8001356 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3d4      	bcc.n	8000c08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c66:	615a      	str	r2, [r3, #20]
 8000c68:	e000      	b.n	8000c6c <HAL_HCD_IRQHandler+0x210>
      return;
 8000c6a:	bf00      	nop
    }
  }
}
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d101      	bne.n	8000c88 <HAL_HCD_Stop+0x16>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e00d      	b.n	8000ca4 <HAL_HCD_Stop+0x32>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fa53 	bl	8002140 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	015a      	lsls	r2, r3, #5
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d11a      	bne.n	8000d12 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2304      	movs	r3, #4
 8000cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	212c      	movs	r1, #44	; 0x2c
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3361      	adds	r3, #97	; 0x61
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f91c 	bl	8001f48 <USB_HC_Halt>
 8000d10:	e0af      	b.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	015a      	lsls	r2, r3, #5
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d28:	d11b      	bne.n	8000d62 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	015a      	lsls	r2, r3, #5
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4413      	add	r3, r2
 8000d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d36:	461a      	mov	r2, r3
 8000d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	212c      	movs	r1, #44	; 0x2c
 8000d44:	fb01 f303 	mul.w	r3, r1, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	3361      	adds	r3, #97	; 0x61
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f8f4 	bl	8001f48 <USB_HC_Halt>
 8000d60:	e087      	b.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	015a      	lsls	r2, r3, #5
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4413      	add	r3, r2
 8000d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d109      	bne.n	8000d8c <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4413      	add	r3, r2
 8000d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d84:	461a      	mov	r2, r3
 8000d86:	2320      	movs	r3, #32
 8000d88:	6093      	str	r3, [r2, #8]
 8000d8a:	e072      	b.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	015a      	lsls	r2, r3, #5
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d11a      	bne.n	8000dd8 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	015a      	lsls	r2, r3, #5
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4413      	add	r3, r2
 8000daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dae:	461a      	mov	r2, r3
 8000db0:	2308      	movs	r3, #8
 8000db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	212c      	movs	r1, #44	; 0x2c
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3361      	adds	r3, #97	; 0x61
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 f8b9 	bl	8001f48 <USB_HC_Halt>
 8000dd6:	e04c      	b.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	015a      	lsls	r2, r3, #5
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4413      	add	r3, r2
 8000de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dee:	d11b      	bne.n	8000e28 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	015a      	lsls	r2, r3, #5
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4413      	add	r3, r2
 8000df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	212c      	movs	r1, #44	; 0x2c
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	3361      	adds	r3, #97	; 0x61
 8000e12:	2208      	movs	r2, #8
 8000e14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f891 	bl	8001f48 <USB_HC_Halt>
 8000e26:	e024      	b.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	015a      	lsls	r2, r3, #5
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4413      	add	r3, r2
 8000e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	2b80      	cmp	r3, #128	; 0x80
 8000e3c:	d119      	bne.n	8000e72 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	015a      	lsls	r2, r3, #5
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4413      	add	r3, r2
 8000e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	212c      	movs	r1, #44	; 0x2c
 8000e56:	fb01 f303 	mul.w	r3, r1, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3361      	adds	r3, #97	; 0x61
 8000e5e:	2206      	movs	r2, #6
 8000e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f86b 	bl	8001f48 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	015a      	lsls	r2, r3, #5
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4413      	add	r3, r2
 8000e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e88:	d112      	bne.n	8000eb0 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 f857 	bl	8001f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	015a      	lsls	r2, r3, #5
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000eae:	e24e      	b.n	800134e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	f040 80df 	bne.w	8001086 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d019      	beq.n	8000f04 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	212c      	movs	r1, #44	; 0x2c
 8000ed6:	fb01 f303 	mul.w	r3, r1, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	3348      	adds	r3, #72	; 0x48
 8000ede:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	0159      	lsls	r1, r3, #5
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	202c      	movs	r0, #44	; 0x2c
 8000efa:	fb00 f303 	mul.w	r3, r0, r3
 8000efe:	440b      	add	r3, r1
 8000f00:	3350      	adds	r3, #80	; 0x50
 8000f02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	212c      	movs	r1, #44	; 0x2c
 8000f0a:	fb01 f303 	mul.w	r3, r1, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	3361      	adds	r3, #97	; 0x61
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	212c      	movs	r1, #44	; 0x2c
 8000f1c:	fb01 f303 	mul.w	r3, r1, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	335c      	adds	r3, #92	; 0x5c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f34:	461a      	mov	r2, r3
 8000f36:	2301      	movs	r3, #1
 8000f38:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	212c      	movs	r1, #44	; 0x2c
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	333f      	adds	r3, #63	; 0x3f
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d009      	beq.n	8000f62 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	212c      	movs	r1, #44	; 0x2c
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	333f      	adds	r3, #63	; 0x3f
 8000f5c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d111      	bne.n	8000f86 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 ffeb 	bl	8001f48 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	015a      	lsls	r2, r3, #5
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4413      	add	r3, r2
 8000f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2310      	movs	r3, #16
 8000f82:	6093      	str	r3, [r2, #8]
 8000f84:	e03a      	b.n	8000ffc <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	212c      	movs	r1, #44	; 0x2c
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	333f      	adds	r3, #63	; 0x3f
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d009      	beq.n	8000fae <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	212c      	movs	r1, #44	; 0x2c
 8000fa0:	fb01 f303 	mul.w	r3, r1, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	333f      	adds	r3, #63	; 0x3f
 8000fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d126      	bne.n	8000ffc <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	015a      	lsls	r2, r3, #5
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	0151      	lsls	r1, r2, #5
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	440a      	add	r2, r1
 8000fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	212c      	movs	r1, #44	; 0x2c
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	3360      	adds	r3, #96	; 0x60
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	202c      	movs	r0, #44	; 0x2c
 8000fea:	fb00 f303 	mul.w	r3, r0, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	3360      	adds	r3, #96	; 0x60
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f002 fa7a 	bl	80034f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d12b      	bne.n	800105c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	212c      	movs	r1, #44	; 0x2c
 800100a:	fb01 f303 	mul.w	r3, r1, r3
 800100e:	4413      	add	r3, r2
 8001010:	3348      	adds	r3, #72	; 0x48
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	202c      	movs	r0, #44	; 0x2c
 800101a:	fb00 f202 	mul.w	r2, r0, r2
 800101e:	440a      	add	r2, r1
 8001020:	3240      	adds	r2, #64	; 0x40
 8001022:	8812      	ldrh	r2, [r2, #0]
 8001024:	fbb3 f3f2 	udiv	r3, r3, r2
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 818e 	beq.w	800134e <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	212c      	movs	r1, #44	; 0x2c
 8001038:	fb01 f303 	mul.w	r3, r1, r3
 800103c:	4413      	add	r3, r2
 800103e:	3354      	adds	r3, #84	; 0x54
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	212c      	movs	r1, #44	; 0x2c
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	4413      	add	r3, r2
 8001054:	3354      	adds	r3, #84	; 0x54
 8001056:	4602      	mov	r2, r0
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	e178      	b.n	800134e <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	212c      	movs	r1, #44	; 0x2c
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	3354      	adds	r3, #84	; 0x54
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2d8      	uxtb	r0, r3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	212c      	movs	r1, #44	; 0x2c
 8001078:	fb01 f303 	mul.w	r3, r1, r3
 800107c:	4413      	add	r3, r2
 800107e:	3354      	adds	r3, #84	; 0x54
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	e163      	b.n	800134e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	015a      	lsls	r2, r3, #5
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4413      	add	r3, r2
 800108e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b02      	cmp	r3, #2
 800109a:	f040 80f6 	bne.w	800128a <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	212c      	movs	r1, #44	; 0x2c
 80010a4:	fb01 f303 	mul.w	r3, r1, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	3361      	adds	r3, #97	; 0x61
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d109      	bne.n	80010c6 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	212c      	movs	r1, #44	; 0x2c
 80010b8:	fb01 f303 	mul.w	r3, r1, r3
 80010bc:	4413      	add	r3, r2
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e0c9      	b.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	212c      	movs	r1, #44	; 0x2c
 80010cc:	fb01 f303 	mul.w	r3, r1, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	3361      	adds	r3, #97	; 0x61
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d109      	bne.n	80010ee <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	212c      	movs	r1, #44	; 0x2c
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	3360      	adds	r3, #96	; 0x60
 80010e8:	2205      	movs	r2, #5
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e0b5      	b.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	212c      	movs	r1, #44	; 0x2c
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	3361      	adds	r3, #97	; 0x61
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d009      	beq.n	8001116 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	212c      	movs	r1, #44	; 0x2c
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	3361      	adds	r3, #97	; 0x61
 8001110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001112:	2b08      	cmp	r3, #8
 8001114:	d150      	bne.n	80011b8 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	335c      	adds	r3, #92	; 0x5c
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	202c      	movs	r0, #44	; 0x2c
 800112e:	fb00 f303 	mul.w	r3, r0, r3
 8001132:	440b      	add	r3, r1
 8001134:	335c      	adds	r3, #92	; 0x5c
 8001136:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	212c      	movs	r1, #44	; 0x2c
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4413      	add	r3, r2
 8001144:	335c      	adds	r3, #92	; 0x5c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d912      	bls.n	8001172 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	212c      	movs	r1, #44	; 0x2c
 8001152:	fb01 f303 	mul.w	r3, r1, r3
 8001156:	4413      	add	r3, r2
 8001158:	335c      	adds	r3, #92	; 0x5c
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	212c      	movs	r1, #44	; 0x2c
 8001164:	fb01 f303 	mul.w	r3, r1, r3
 8001168:	4413      	add	r3, r2
 800116a:	3360      	adds	r3, #96	; 0x60
 800116c:	2204      	movs	r2, #4
 800116e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001170:	e073      	b.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	4413      	add	r3, r2
 800117e:	3360      	adds	r3, #96	; 0x60
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4413      	add	r3, r2
 800118c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800119a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	015a      	lsls	r2, r3, #5
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4413      	add	r3, r2
 80011ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011b6:	e050      	b.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	212c      	movs	r1, #44	; 0x2c
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	3361      	adds	r3, #97	; 0x61
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d122      	bne.n	8001212 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	212c      	movs	r1, #44	; 0x2c
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	3360      	adds	r3, #96	; 0x60
 80011da:	2202      	movs	r2, #2
 80011dc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	015a      	lsls	r2, r3, #5
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80011f4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4413      	add	r3, r2
 8001206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e023      	b.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	3361      	adds	r3, #97	; 0x61
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b07      	cmp	r3, #7
 8001224:	d119      	bne.n	800125a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	335c      	adds	r3, #92	; 0x5c
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	202c      	movs	r0, #44	; 0x2c
 800123e:	fb00 f303 	mul.w	r3, r0, r3
 8001242:	440b      	add	r3, r1
 8001244:	335c      	adds	r3, #92	; 0x5c
 8001246:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	212c      	movs	r1, #44	; 0x2c
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4413      	add	r3, r2
 8001254:	3360      	adds	r3, #96	; 0x60
 8001256:	2204      	movs	r2, #4
 8001258:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4413      	add	r3, r2
 8001262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001266:	461a      	mov	r2, r3
 8001268:	2302      	movs	r3, #2
 800126a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	202c      	movs	r0, #44	; 0x2c
 8001276:	fb00 f303 	mul.w	r3, r0, r3
 800127a:	4413      	add	r3, r2
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f002 f934 	bl	80034f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001288:	e061      	b.n	800134e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	015a      	lsls	r2, r3, #5
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4413      	add	r3, r2
 8001292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b10      	cmp	r3, #16
 800129e:	d156      	bne.n	800134e <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	212c      	movs	r1, #44	; 0x2c
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	333f      	adds	r3, #63	; 0x3f
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d111      	bne.n	80012d8 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	212c      	movs	r1, #44	; 0x2c
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	335c      	adds	r3, #92	; 0x5c
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe39 	bl	8001f48 <USB_HC_Halt>
 80012d6:	e031      	b.n	800133c <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	212c      	movs	r1, #44	; 0x2c
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	333f      	adds	r3, #63	; 0x3f
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	212c      	movs	r1, #44	; 0x2c
 80012f2:	fb01 f303 	mul.w	r3, r1, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	333f      	adds	r3, #63	; 0x3f
 80012fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d11d      	bne.n	800133c <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	212c      	movs	r1, #44	; 0x2c
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	4413      	add	r3, r2
 800130c:	335c      	adds	r3, #92	; 0x5c
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d110      	bne.n	800133c <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	212c      	movs	r1, #44	; 0x2c
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	4413      	add	r3, r2
 8001326:	3361      	adds	r3, #97	; 0x61
 8001328:	2203      	movs	r2, #3
 800132a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fe06 	bl	8001f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4413      	add	r3, r2
 8001344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001348:	461a      	mov	r2, r3
 800134a:	2310      	movs	r3, #16
 800134c:	6093      	str	r3, [r2, #8]
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	015a      	lsls	r2, r3, #5
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	4413      	add	r3, r2
 8001378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b04      	cmp	r3, #4
 8001384:	d11a      	bne.n	80013bc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4413      	add	r3, r2
 800138e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001392:	461a      	mov	r2, r3
 8001394:	2304      	movs	r3, #4
 8001396:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	3361      	adds	r3, #97	; 0x61
 80013a6:	2206      	movs	r2, #6
 80013a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fdc7 	bl	8001f48 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80013ba:	e331      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d12e      	bne.n	8001430 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013de:	461a      	mov	r2, r3
 80013e0:	2320      	movs	r3, #32
 80013e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	212c      	movs	r1, #44	; 0x2c
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	333d      	adds	r3, #61	; 0x3d
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 8313 	bne.w	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	212c      	movs	r1, #44	; 0x2c
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	333d      	adds	r3, #61	; 0x3d
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	3360      	adds	r3, #96	; 0x60
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fd8d 	bl	8001f48 <USB_HC_Halt>
}
 800142e:	e2f7      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001446:	d112      	bne.n	800146e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4413      	add	r3, r2
 8001450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001454:	461a      	mov	r2, r3
 8001456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fd6e 	bl	8001f48 <USB_HC_Halt>
}
 800146c:	e2d8      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4413      	add	r3, r2
 8001476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d140      	bne.n	8001506 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	212c      	movs	r1, #44	; 0x2c
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	4413      	add	r3, r2
 8001490:	335c      	adds	r3, #92	; 0x5c
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a8:	2b40      	cmp	r3, #64	; 0x40
 80014aa:	d111      	bne.n	80014d0 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	333d      	adds	r3, #61	; 0x3d
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ca:	461a      	mov	r2, r3
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014dc:	461a      	mov	r2, r3
 80014de:	2301      	movs	r3, #1
 80014e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	212c      	movs	r1, #44	; 0x2c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3361      	adds	r3, #97	; 0x61
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd22 	bl	8001f48 <USB_HC_Halt>
}
 8001504:	e28c      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4413      	add	r3, r2
 800150e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001518:	2b40      	cmp	r3, #64	; 0x40
 800151a:	d12c      	bne.n	8001576 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3361      	adds	r3, #97	; 0x61
 800152a:	2204      	movs	r2, #4
 800152c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	333d      	adds	r3, #61	; 0x3d
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	335c      	adds	r3, #92	; 0x5c
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fcf3 	bl	8001f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4413      	add	r3, r2
 800156a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156e:	461a      	mov	r2, r3
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	6093      	str	r3, [r2, #8]
}
 8001574:	e254      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4413      	add	r3, r2
 800157e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d11a      	bne.n	80015c2 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001598:	461a      	mov	r2, r3
 800159a:	2308      	movs	r3, #8
 800159c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	212c      	movs	r1, #44	; 0x2c
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	3361      	adds	r3, #97	; 0x61
 80015ac:	2205      	movs	r2, #5
 80015ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fcc4 	bl	8001f48 <USB_HC_Halt>
}
 80015c0:	e22e      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d140      	bne.n	800165a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	335c      	adds	r3, #92	; 0x5c
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	3361      	adds	r3, #97	; 0x61
 80015f8:	2203      	movs	r2, #3
 80015fa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	333d      	adds	r3, #61	; 0x3d
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d112      	bne.n	8001636 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	333c      	adds	r3, #60	; 0x3c
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d108      	bne.n	8001636 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	333d      	adds	r3, #61	; 0x3d
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fc81 	bl	8001f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4413      	add	r3, r2
 800164e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001652:	461a      	mov	r2, r3
 8001654:	2310      	movs	r3, #16
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	e1e2      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4413      	add	r3, r2
 8001662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	2b80      	cmp	r3, #128	; 0x80
 800166e:	d164      	bne.n	800173a <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3361      	adds	r3, #97	; 0x61
 8001686:	2206      	movs	r2, #6
 8001688:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fc57 	bl	8001f48 <USB_HC_Halt>
 800169a:	e044      	b.n	8001726 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	335c      	adds	r3, #92	; 0x5c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	202c      	movs	r0, #44	; 0x2c
 80016b4:	fb00 f303 	mul.w	r3, r0, r3
 80016b8:	440b      	add	r3, r1
 80016ba:	335c      	adds	r3, #92	; 0x5c
 80016bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	335c      	adds	r3, #92	; 0x5c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d920      	bls.n	8001714 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	335c      	adds	r3, #92	; 0x5c
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3360      	adds	r3, #96	; 0x60
 80016f2:	2204      	movs	r2, #4
 80016f4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	b2d9      	uxtb	r1, r3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	202c      	movs	r0, #44	; 0x2c
 8001700:	fb00 f303 	mul.w	r3, r0, r3
 8001704:	4413      	add	r3, r2
 8001706:	3360      	adds	r3, #96	; 0x60
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 feef 	bl	80034f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001712:	e008      	b.n	8001726 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3360      	adds	r3, #96	; 0x60
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001732:	461a      	mov	r2, r3
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	6093      	str	r3, [r2, #8]
}
 8001738:	e172      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001750:	d11b      	bne.n	800178a <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3361      	adds	r3, #97	; 0x61
 8001760:	2208      	movs	r2, #8
 8001762:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fbea 	bl	8001f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	461a      	mov	r2, r3
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001786:	6093      	str	r3, [r2, #8]
}
 8001788:	e14a      	b.n	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4413      	add	r3, r2
 8001792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 813f 	bne.w	8001a20 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	3361      	adds	r3, #97	; 0x61
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d17d      	bne.n	80018b2 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	3360      	adds	r3, #96	; 0x60
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	333f      	adds	r3, #63	; 0x3f
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d00a      	beq.n	80017f2 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	333f      	adds	r3, #63	; 0x3f
 80017ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	f040 8100 	bne.w	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d113      	bne.n	8001822 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3355      	adds	r3, #85	; 0x55
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3355      	adds	r3, #85	; 0x55
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	f040 80e3 	bne.w	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	334c      	adds	r3, #76	; 0x4c
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80d8 	beq.w	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	334c      	adds	r3, #76	; 0x4c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	202c      	movs	r0, #44	; 0x2c
 8001858:	fb00 f202 	mul.w	r2, r0, r2
 800185c:	440a      	add	r2, r1
 800185e:	3240      	adds	r2, #64	; 0x40
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	4413      	add	r3, r2
 8001864:	3b01      	subs	r3, #1
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	202c      	movs	r0, #44	; 0x2c
 800186c:	fb00 f202 	mul.w	r2, r0, r2
 8001870:	440a      	add	r2, r1
 8001872:	3240      	adds	r2, #64	; 0x40
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	fbb3 f3f2 	udiv	r3, r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b5 	beq.w	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3355      	adds	r3, #85	; 0x55
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f083 0301 	eor.w	r3, r3, #1
 800189c:	b2d8      	uxtb	r0, r3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3355      	adds	r3, #85	; 0x55
 80018ac:	4602      	mov	r2, r0
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e09f      	b.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3361      	adds	r3, #97	; 0x61
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d109      	bne.n	80018da <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3360      	adds	r3, #96	; 0x60
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e08b      	b.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3361      	adds	r3, #97	; 0x61
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d109      	bne.n	8001902 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3360      	adds	r3, #96	; 0x60
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e077      	b.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3361      	adds	r3, #97	; 0x61
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d109      	bne.n	800192a <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3360      	adds	r3, #96	; 0x60
 8001924:	2205      	movs	r2, #5
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e063      	b.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3361      	adds	r3, #97	; 0x61
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d009      	beq.n	8001952 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3361      	adds	r3, #97	; 0x61
 800194c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800194e:	2b08      	cmp	r3, #8
 8001950:	d14f      	bne.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	335c      	adds	r3, #92	; 0x5c
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	202c      	movs	r0, #44	; 0x2c
 800196a:	fb00 f303 	mul.w	r3, r0, r3
 800196e:	440b      	add	r3, r1
 8001970:	335c      	adds	r3, #92	; 0x5c
 8001972:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	335c      	adds	r3, #92	; 0x5c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d912      	bls.n	80019ae <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	335c      	adds	r3, #92	; 0x5c
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3360      	adds	r3, #96	; 0x60
 80019a8:	2204      	movs	r2, #4
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e021      	b.n	80019f2 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3360      	adds	r3, #96	; 0x60
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019d6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019de:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ec:	461a      	mov	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	2302      	movs	r3, #2
 8001a02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	202c      	movs	r0, #44	; 0x2c
 8001a0e:	fb00 f303 	mul.w	r3, r0, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f001 fd68 	bl	80034f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	0c5b      	lsrs	r3, r3, #17
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a5c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d004      	beq.n	8001a6e <HCD_RXQLVL_IRQHandler+0x46>
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	f000 80a9 	beq.w	8001bbe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001a6c:	e0aa      	b.n	8001bc4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a6 	beq.w	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3344      	adds	r3, #68	; 0x44
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 809b 	beq.w	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3350      	adds	r3, #80	; 0x50
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	441a      	add	r2, r3
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	202c      	movs	r0, #44	; 0x2c
 8001aa6:	fb00 f303 	mul.w	r3, r0, r3
 8001aaa:	440b      	add	r3, r1
 8001aac:	334c      	adds	r3, #76	; 0x4c
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d87a      	bhi.n	8001baa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3344      	adds	r3, #68	; 0x44
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	b292      	uxth	r2, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f000 f977 	bl	8001dc0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3344      	adds	r3, #68	; 0x44
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	202c      	movs	r0, #44	; 0x2c
 8001aec:	fb00 f303 	mul.w	r3, r0, r3
 8001af0:	440b      	add	r3, r1
 8001af2:	3344      	adds	r3, #68	; 0x44
 8001af4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3350      	adds	r3, #80	; 0x50
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	441a      	add	r2, r3
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	202c      	movs	r0, #44	; 0x2c
 8001b10:	fb00 f303 	mul.w	r3, r0, r3
 8001b14:	440b      	add	r3, r1
 8001b16:	3350      	adds	r3, #80	; 0x50
 8001b18:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	0cdb      	lsrs	r3, r3, #19
 8001b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3340      	adds	r3, #64	; 0x40
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d13c      	bne.n	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d039      	beq.n	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b64:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b6c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3354      	adds	r3, #84	; 0x54
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f083 0301 	eor.w	r3, r3, #1
 8001b94:	b2d8      	uxtb	r0, r3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3354      	adds	r3, #84	; 0x54
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	701a      	strb	r2, [r3, #0]
      break;
 8001ba8:	e00b      	b.n	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	2204      	movs	r2, #4
 8001bba:	701a      	strb	r2, [r3, #0]
      break;
 8001bbc:	e001      	b.n	8001bc2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e000      	b.n	8001bc4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001bc2:	bf00      	nop
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001bf8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10b      	bne.n	8001c1c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f001 fc52 	bl	80034b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d132      	bne.n	8001c8c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d126      	bne.n	8001c86 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d113      	bne.n	8001c68 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c4a:	d106      	bne.n	8001c5a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2102      	movs	r1, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f92d 	bl	8001eb2 <USB_InitFSLSPClkSel>
 8001c58:	e011      	b.n	8001c7e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f926 	bl	8001eb2 <USB_InitFSLSPClkSel>
 8001c66:	e00a      	b.n	8001c7e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c76:	461a      	mov	r2, r3
 8001c78:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001c7c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 fc48 	bl	8003514 <HAL_HCD_PortEnabled_Callback>
 8001c84:	e002      	b.n	8001c8c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f001 fc52 	bl	8003530 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d103      	bne.n	8001c9e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 0201 	bic.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <USB_FlushTxFifo+0x64>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e01b      	b.n	8001d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	daf2      	bge.n	8001d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <USB_FlushTxFifo+0x64>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e006      	b.n	8001d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d0f0      	beq.n	8001d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	00030d40 	.word	0x00030d40

08001d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <USB_FlushRxFifo+0x5c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e018      	b.n	8001db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	daf2      	bge.n	8001d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <USB_FlushRxFifo+0x5c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e006      	b.n	8001db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d0f0      	beq.n	8001d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	00030d40 	.word	0x00030d40

08001dc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	e014      	b.n	8001e16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	601a      	str	r2, [r3, #0]
    pDest++;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3301      	adds	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	3301      	adds	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	6a3a      	ldr	r2, [r7, #32]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3e6      	bcc.n	8001dec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001e1e:	8bfb      	ldrh	r3, [r7, #30]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01e      	beq.n	8001e62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	701a      	strb	r2, [r3, #0]
      i++;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3301      	adds	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001e56:	8bfb      	ldrh	r3, [r7, #30]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001e5c:	8bfb      	ldrh	r3, [r7, #30]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ea      	bne.n	8001e38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	372c      	adds	r7, #44	; 0x2c
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed0:	f023 0303 	bic.w	r3, r3, #3
 8001ed4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efa:	461a      	mov	r2, r3
 8001efc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001f00:	6053      	str	r3, [r2, #4]
 8001f02:	e009      	b.n	8001f18 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d106      	bne.n	8001f18 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f10:	461a      	mov	r2, r3
 8001f12:	f241 7370 	movw	r3, #6000	; 0x1770
 8001f16:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	b29b      	uxth	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0fdb      	lsrs	r3, r3, #31
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d104      	bne.n	8001fa2 <USB_HC_Halt+0x5a>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e0c8      	b.n	8002134 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <USB_HC_Halt+0x66>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d163      	bne.n	8002076 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fcc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80ab 	bne.w	8002132 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d133      	bne.n	8002050 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	0151      	lsls	r1, r2, #5
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002006:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002026:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002034:	d81d      	bhi.n	8002072 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800204c:	d0ec      	beq.n	8002028 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800204e:	e070      	b.n	8002132 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	440a      	add	r2, r1
 8002066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800206e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002070:	e05f      	b.n	8002132 <USB_HC_Halt+0x1ea>
            break;
 8002072:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002074:	e05d      	b.n	8002132 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	0151      	lsls	r1, r2, #5
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	440a      	add	r2, r1
 800208c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002094:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d133      	bne.n	800210e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	0151      	lsls	r1, r2, #5
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	440a      	add	r2, r1
 80020bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	0151      	lsls	r1, r2, #5
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	440a      	add	r2, r1
 80020dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3301      	adds	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f2:	d81d      	bhi.n	8002130 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800210a:	d0ec      	beq.n	80020e6 <USB_HC_Halt+0x19e>
 800210c:	e011      	b.n	8002132 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	0151      	lsls	r1, r2, #5
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	440a      	add	r2, r1
 8002124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e000      	b.n	8002132 <USB_HC_Halt+0x1ea>
          break;
 8002130:	bf00      	nop
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fdbd 	bl	8001cd4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800215a:	2110      	movs	r1, #16
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff fdcb 	bl	8001cf8 <USB_FlushTxFifo>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fdf7 	bl	8001d60 <USB_FlushRxFifo>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e01f      	b.n	80021c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002198:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3301      	adds	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d9dc      	bls.n	8002182 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e034      	b.n	8002238 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002214:	d80c      	bhi.n	8002230 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222c:	d0ec      	beq.n	8002208 <USB_StopHost+0xc8>
 800222e:	e000      	b.n	8002232 <USB_StopHost+0xf2>
        break;
 8002230:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3301      	adds	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	d9c7      	bls.n	80021ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002244:	461a      	mov	r2, r3
 8002246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002252:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fd2c 	bl	8001cb2 <USB_EnableGlobalInt>

  return ret;
 800225a:	7ffb      	ldrb	r3, [r7, #31]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f804 	bl	8002288 <USBH_HandleSof>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b0b      	cmp	r3, #11
 8002298:	d10a      	bne.n	80022b0 <USBH_HandleSof+0x28>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80022dc:	2200      	movs	r2, #0
 80022de:	4619      	mov	r1, r3
 80022e0:	f000 f8ae 	bl	8002440 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80022e4:	bf00      	nop
}
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80022fc:	bf00      	nop
}
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	f000 f87e 	bl	8002440 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f001 f8ec 	bl	800354c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	791b      	ldrb	r3, [r3, #4]
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f830 	bl	80023e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	795b      	ldrb	r3, [r3, #5]
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f82a 	bl	80023e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80023a0:	2200      	movs	r2, #0
 80023a2:	4619      	mov	r1, r3
 80023a4:	f000 f84c 	bl	8002440 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80023ce:	2200      	movs	r2, #0
 80023d0:	4619      	mov	r1, r3
 80023d2:	f000 f835 	bl	8002440 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d80d      	bhi.n	800240e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	33e0      	adds	r3, #224	; 0xe0
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	33e0      	adds	r3, #224	; 0xe0
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002422:	f3ef 8305 	mrs	r3, IPSR
 8002426:	607b      	str	r3, [r7, #4]
  return(result);
 8002428:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <osMessagePut+0x1e>
    ticks = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800245e:	f7ff ffdd 	bl	800241c <inHandlerMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002468:	f107 0210 	add.w	r2, r7, #16
 800246c:	f107 0108 	add.w	r1, r7, #8
 8002470:	2300      	movs	r3, #0
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f9aa 	bl	80027cc <xQueueGenericSendFromISR>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <osMessagePut+0x42>
      return osErrorOS;
 800247e:	23ff      	movs	r3, #255	; 0xff
 8002480:	e018      	b.n	80024b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d014      	beq.n	80024b2 <osMessagePut+0x72>
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <osMessagePut+0x7c>)
 800248a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	e00b      	b.n	80024b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800249a:	f107 0108 	add.w	r1, r7, #8
 800249e:	2300      	movs	r3, #0
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f894 	bl	80025d0 <xQueueGenericSend>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <osMessagePut+0x72>
      return osErrorOS;
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	e000      	b.n	80024b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	e000ed04 	.word	0xe000ed04

080024c0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251e:	d103      	bne.n	8002528 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e00c      	b.n	8002542 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3308      	adds	r3, #8
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e002      	b.n	8002536 <vListInsert+0x2e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d2f6      	bcs.n	8002530 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6852      	ldr	r2, [r2, #4]
 800259a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d103      	bne.n	80025ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	; 0x38
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <xQueueGenericSend+0x40>
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <xQueueGenericSend+0x44>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <xQueueGenericSend+0x46>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <xQueueGenericSend+0x60>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800262c:	bf00      	nop
 800262e:	e7fe      	b.n	800262e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <xQueueGenericSend+0x6e>
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <xQueueGenericSend+0x72>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <xQueueGenericSend+0x74>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericSend+0x8e>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	623b      	str	r3, [r7, #32]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800265e:	f000 fd0d 	bl	800307c <xTaskGetSchedulerState>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <xQueueGenericSend+0x9e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <xQueueGenericSend+0xa2>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <xQueueGenericSend+0xa4>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <xQueueGenericSend+0xbe>
	__asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	61fb      	str	r3, [r7, #28]
}
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800268e:	f000 fe13 	bl	80032b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <xQueueGenericSend+0xd4>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d129      	bne.n	80026f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026aa:	f000 f92a 	bl	8002902 <prvCopyDataToQueue>
 80026ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3324      	adds	r3, #36	; 0x24
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fbd7 	bl	8002e70 <xTaskRemoveFromEventList>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <xQueueGenericSend+0x1f8>)
 80026ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	e00a      	b.n	80026f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <xQueueGenericSend+0x1f8>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026f0:	f000 fe12 	bl	8003318 <vPortExitCritical>
				return pdPASS;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e063      	b.n	80027c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026fe:	f000 fe0b 	bl	8003318 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002702:	2300      	movs	r3, #0
 8002704:	e05c      	b.n	80027c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fc0f 	bl	8002f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002716:	2301      	movs	r3, #1
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800271a:	f000 fdfd 	bl	8003318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800271e:	f000 f9c5 	bl	8002aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002722:	f000 fdc9 	bl	80032b8 <vPortEnterCritical>
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002732:	d103      	bne.n	800273c <xQueueGenericSend+0x16c>
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002742:	b25b      	sxtb	r3, r3
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d103      	bne.n	8002752 <xQueueGenericSend+0x182>
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002752:	f000 fde1 	bl	8003318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002756:	1d3a      	adds	r2, r7, #4
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fbfe 	bl	8002f60 <xTaskCheckForTimeOut>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d124      	bne.n	80027b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800276a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276c:	f000 f985 	bl	8002a7a <prvIsQueueFull>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	3310      	adds	r3, #16
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fb52 	bl	8002e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002786:	f000 f926 	bl	80029d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800278a:	f000 f99d 	bl	8002ac8 <xTaskResumeAll>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f af7c 	bne.w	800268e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <xQueueGenericSend+0x1f8>)
 8002798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	e772      	b.n	800268e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027aa:	f000 f914 	bl	80029d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ae:	f000 f98b 	bl	8002ac8 <xTaskResumeAll>
 80027b2:	e76c      	b.n	800268e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b6:	f000 f90e 	bl	80029d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027ba:	f000 f985 	bl	8002ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3738      	adds	r7, #56	; 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <xQueueGenericSendFromISR+0x3c>
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <xQueueGenericSendFromISR+0x40>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <xQueueGenericSendFromISR+0x42>
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d103      	bne.n	8002836 <xQueueGenericSendFromISR+0x6a>
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <xQueueGenericSendFromISR+0x6e>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueGenericSendFromISR+0x70>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	623b      	str	r3, [r7, #32]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002856:	f000 fde1 	bl	800341c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800285a:	f3ef 8211 	mrs	r2, BASEPRI
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	61fa      	str	r2, [r7, #28]
 8002870:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002872:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <xQueueGenericSendFromISR+0xbc>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d12f      	bne.n	80028e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800289e:	f000 f830 	bl	8002902 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028aa:	d112      	bne.n	80028d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	3324      	adds	r3, #36	; 0x24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fad9 	bl	8002e70 <xTaskRemoveFromEventList>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028d6:	3301      	adds	r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028e6:	e001      	b.n	80028ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3740      	adds	r7, #64	; 0x40
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d14d      	bne.n	80029c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fbc3 	bl	80030b8 <xTaskPriorityDisinherit>
 8002932:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	e043      	b.n	80029c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d119      	bne.n	8002976 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6858      	ldr	r0, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	461a      	mov	r2, r3
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	f000 fe69 	bl	8003624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	d32b      	bcc.n	80029c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e026      	b.n	80029c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68d8      	ldr	r0, [r3, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	461a      	mov	r2, r3
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	f000 fe4f 	bl	8003624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	425b      	negs	r3, r3
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d207      	bcs.n	80029b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	425b      	negs	r3, r3
 80029ac:	441a      	add	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d105      	bne.n	80029c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029cc:	697b      	ldr	r3, [r7, #20]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029de:	f000 fc6b 	bl	80032b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ea:	e011      	b.n	8002a10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3324      	adds	r3, #36	; 0x24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fa39 	bl	8002e70 <xTaskRemoveFromEventList>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a04:	f000 fb0e 	bl	8003024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dce9      	bgt.n	80029ec <prvUnlockQueue+0x16>
 8002a18:	e000      	b.n	8002a1c <prvUnlockQueue+0x46>
					break;
 8002a1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a24:	f000 fc78 	bl	8003318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a28:	f000 fc46 	bl	80032b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a34:	e011      	b.n	8002a5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3310      	adds	r3, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fa14 	bl	8002e70 <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a4e:	f000 fae9 	bl	8003024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a52:	7bbb      	ldrb	r3, [r7, #14]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	dce9      	bgt.n	8002a36 <prvUnlockQueue+0x60>
 8002a62:	e000      	b.n	8002a66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a6e:	f000 fc53 	bl	8003318 <vPortExitCritical>
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a82:	f000 fc19 	bl	80032b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d102      	bne.n	8002a98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e001      	b.n	8002a9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a9c:	f000 fc3c 	bl	8003318 <vPortExitCritical>

	return xReturn;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <vTaskSuspendAll+0x18>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <vTaskSuspendAll+0x18>)
 8002ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	20000110 	.word	0x20000110

08002ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <xTaskResumeAll+0x114>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002af4:	f000 fbe0 	bl	80032b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002af8:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <xTaskResumeAll+0x114>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <xTaskResumeAll+0x114>)
 8002b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <xTaskResumeAll+0x114>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d161      	bne.n	8002bce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <xTaskResumeAll+0x118>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d05d      	beq.n	8002bce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b12:	e02e      	b.n	8002b72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <xTaskResumeAll+0x11c>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3318      	adds	r3, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd2a 	bl	800257a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fd25 	bl	800257a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <xTaskResumeAll+0x120>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <xTaskResumeAll+0x120>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a27      	ldr	r2, [pc, #156]	; (8002bec <xTaskResumeAll+0x124>)
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7ff fcb1 	bl	80024c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <xTaskResumeAll+0x128>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <xTaskResumeAll+0x12c>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <xTaskResumeAll+0x11c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1cc      	bne.n	8002b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b80:	f000 fa5c 	bl	800303c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <xTaskResumeAll+0x130>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b90:	f000 f836 	bl	8002c00 <xTaskIncrementTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <xTaskResumeAll+0x12c>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f1      	bne.n	8002b90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <xTaskResumeAll+0x130>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <xTaskResumeAll+0x12c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <xTaskResumeAll+0x134>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bce:	f000 fba3 	bl	8003318 <vPortExitCritical>

	return xAlreadyYielded;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000110 	.word	0x20000110
 8002be0:	200000f0 	.word	0x200000f0
 8002be4:	200000c8 	.word	0x200000c8
 8002be8:	200000f8 	.word	0x200000f8
 8002bec:	20000034 	.word	0x20000034
 8002bf0:	20000030 	.word	0x20000030
 8002bf4:	20000104 	.word	0x20000104
 8002bf8:	20000100 	.word	0x20000100
 8002bfc:	e000ed04 	.word	0xe000ed04

08002c00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <xTaskIncrementTick+0x144>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 808e 	bne.w	8002d30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <xTaskIncrementTick+0x148>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <xTaskIncrementTick+0x148>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d120      	bne.n	8002c6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <xTaskIncrementTick+0x14c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	603b      	str	r3, [r7, #0]
}
 8002c44:	bf00      	nop
 8002c46:	e7fe      	b.n	8002c46 <xTaskIncrementTick+0x46>
 8002c48:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <xTaskIncrementTick+0x14c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <xTaskIncrementTick+0x150>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3e      	ldr	r2, [pc, #248]	; (8002d4c <xTaskIncrementTick+0x14c>)
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4a3e      	ldr	r2, [pc, #248]	; (8002d50 <xTaskIncrementTick+0x150>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <xTaskIncrementTick+0x154>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <xTaskIncrementTick+0x154>)
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	f000 f9e9 	bl	800303c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <xTaskIncrementTick+0x158>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d348      	bcc.n	8002d06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <xTaskIncrementTick+0x14c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <xTaskIncrementTick+0x158>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c84:	601a      	str	r2, [r3, #0]
					break;
 8002c86:	e03e      	b.n	8002d06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <xTaskIncrementTick+0x14c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d203      	bcs.n	8002ca8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <xTaskIncrementTick+0x158>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ca6:	e02e      	b.n	8002d06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fc64 	bl	800257a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fc5b 	bl	800257a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <xTaskIncrementTick+0x15c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <xTaskIncrementTick+0x15c>)
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <xTaskIncrementTick+0x160>)
 8002ce4:	441a      	add	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f7ff fbe7 	bl	80024c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <xTaskIncrementTick+0x164>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3b9      	bcc.n	8002c74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d00:	2301      	movs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d04:	e7b6      	b.n	8002c74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <xTaskIncrementTick+0x164>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4914      	ldr	r1, [pc, #80]	; (8002d60 <xTaskIncrementTick+0x160>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d901      	bls.n	8002d22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <xTaskIncrementTick+0x168>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e004      	b.n	8002d3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <xTaskIncrementTick+0x16c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <xTaskIncrementTick+0x16c>)
 8002d38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000110 	.word	0x20000110
 8002d48:	200000f4 	.word	0x200000f4
 8002d4c:	200000c0 	.word	0x200000c0
 8002d50:	200000c4 	.word	0x200000c4
 8002d54:	20000108 	.word	0x20000108
 8002d58:	2000010c 	.word	0x2000010c
 8002d5c:	200000f8 	.word	0x200000f8
 8002d60:	20000034 	.word	0x20000034
 8002d64:	20000030 	.word	0x20000030
 8002d68:	20000104 	.word	0x20000104
 8002d6c:	20000100 	.word	0x20000100

08002d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d76:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <vTaskSwitchContext+0xa4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <vTaskSwitchContext+0xa8>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d84:	e03f      	b.n	8002e06 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <vTaskSwitchContext+0xa8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <vTaskSwitchContext+0xac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f1c3 031f 	rsb	r3, r3, #31
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	491f      	ldr	r1, [pc, #124]	; (8002e20 <vTaskSwitchContext+0xb0>)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <vTaskSwitchContext+0x5c>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	607b      	str	r3, [r7, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <vTaskSwitchContext+0x5a>
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <vTaskSwitchContext+0xb0>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3308      	adds	r3, #8
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d104      	bne.n	8002dfc <vTaskSwitchContext+0x8c>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <vTaskSwitchContext+0xb4>)
 8002e04:	6013      	str	r3, [r2, #0]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000110 	.word	0x20000110
 8002e18:	20000104 	.word	0x20000104
 8002e1c:	200000f8 	.word	0x200000f8
 8002e20:	20000034 	.word	0x20000034
 8002e24:	20000030 	.word	0x20000030

08002e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	60fb      	str	r3, [r7, #12]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <vTaskPlaceOnEventList+0x44>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3318      	adds	r3, #24
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fb56 	bl	8002508 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f000 f9b0 	bl	80031c4 <prvAddCurrentTaskToDelayedList>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000030 	.word	0x20000030

08002e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	60fb      	str	r3, [r7, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fb6a 	bl	800257a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <xTaskRemoveFromEventList+0xac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11c      	bne.n	8002ee8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fb61 	bl	800257a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <xTaskRemoveFromEventList+0xb0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <xTaskRemoveFromEventList+0xb0>)
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <xTaskRemoveFromEventList+0xb4>)
 8002ed8:	441a      	add	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7ff faed 	bl	80024c0 <vListInsertEnd>
 8002ee6:	e005      	b.n	8002ef4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3318      	adds	r3, #24
 8002eec:	4619      	mov	r1, r3
 8002eee:	480e      	ldr	r0, [pc, #56]	; (8002f28 <xTaskRemoveFromEventList+0xb8>)
 8002ef0:	f7ff fae6 	bl	80024c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <xTaskRemoveFromEventList+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d905      	bls.n	8002f0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <xTaskRemoveFromEventList+0xc0>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e001      	b.n	8002f12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f12:	697b      	ldr	r3, [r7, #20]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000110 	.word	0x20000110
 8002f20:	200000f8 	.word	0x200000f8
 8002f24:	20000034 	.word	0x20000034
 8002f28:	200000c8 	.word	0x200000c8
 8002f2c:	20000030 	.word	0x20000030
 8002f30:	20000104 	.word	0x20000104

08002f34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <vTaskInternalSetTimeOutState+0x24>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <vTaskInternalSetTimeOutState+0x28>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	605a      	str	r2, [r3, #4]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	20000108 	.word	0x20000108
 8002f5c:	200000f4 	.word	0x200000f4

08002f60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	613b      	str	r3, [r7, #16]
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	60fb      	str	r3, [r7, #12]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002fa2:	f000 f989 	bl	80032b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <xTaskCheckForTimeOut+0xbc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d102      	bne.n	8002fc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	e023      	b.n	800300e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <xTaskCheckForTimeOut+0xc0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d007      	beq.n	8002fe2 <xTaskCheckForTimeOut+0x82>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e015      	b.n	800300e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d20b      	bcs.n	8003004 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad2      	subs	r2, r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff9b 	bl	8002f34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e004      	b.n	800300e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800300a:	2301      	movs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800300e:	f000 f983 	bl	8003318 <vPortExitCritical>

	return xReturn;
 8003012:	69fb      	ldr	r3, [r7, #28]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200000f4 	.word	0x200000f4
 8003020:	20000108 	.word	0x20000108

08003024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <vTaskMissedYield+0x14>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000104 	.word	0x20000104

0800303c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <prvResetNextTaskUnblockTime+0x38>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <prvResetNextTaskUnblockTime+0x3c>)
 800304e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003052:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003054:	e008      	b.n	8003068 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <prvResetNextTaskUnblockTime+0x38>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a04      	ldr	r2, [pc, #16]	; (8003078 <prvResetNextTaskUnblockTime+0x3c>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	200000c0 	.word	0x200000c0
 8003078:	2000010c 	.word	0x2000010c

0800307c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <xTaskGetSchedulerState+0x34>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800308a:	2301      	movs	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	e008      	b.n	80030a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <xTaskGetSchedulerState+0x38>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003098:	2302      	movs	r3, #2
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	e001      	b.n	80030a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030a2:	687b      	ldr	r3, [r7, #4]
	}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	200000fc 	.word	0x200000fc
 80030b4:	20000110 	.word	0x20000110

080030b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d06e      	beq.n	80031ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <xTaskPriorityDisinherit+0x100>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d00a      	beq.n	80030ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	60fb      	str	r3, [r7, #12]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60bb      	str	r3, [r7, #8]
}
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	1e5a      	subs	r2, r3, #1
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	429a      	cmp	r2, r3
 8003120:	d044      	beq.n	80031ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	2b00      	cmp	r3, #0
 8003128:	d140      	bne.n	80031ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fa23 	bl	800257a <uxListRemove>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	491f      	ldr	r1, [pc, #124]	; (80031bc <xTaskPriorityDisinherit+0x104>)
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <xTaskPriorityDisinherit+0xae>
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <xTaskPriorityDisinherit+0x108>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4013      	ands	r3, r2
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <xTaskPriorityDisinherit+0x108>)
 8003164:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f1c3 0207 	rsb	r2, r3, #7
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	2201      	movs	r2, #1
 8003180:	409a      	lsls	r2, r3
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <xTaskPriorityDisinherit+0x108>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <xTaskPriorityDisinherit+0x108>)
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <xTaskPriorityDisinherit+0x104>)
 800319a:	441a      	add	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7ff f98c 	bl	80024c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031ac:	697b      	ldr	r3, [r7, #20]
	}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000030 	.word	0x20000030
 80031bc:	20000034 	.word	0x20000034
 80031c0:	200000f8 	.word	0x200000f8

080031c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <prvAddCurrentTaskToDelayedList+0xb0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f9cd 	bl	800257a <uxListRemove>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	2201      	movs	r2, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <prvAddCurrentTaskToDelayedList+0xb8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4013      	ands	r3, r2
 80031fa:	4a20      	ldr	r2, [pc, #128]	; (800327c <prvAddCurrentTaskToDelayedList+0xb8>)
 80031fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003204:	d10a      	bne.n	800321c <prvAddCurrentTaskToDelayedList+0x58>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	481a      	ldr	r0, [pc, #104]	; (8003280 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003216:	f7ff f953 	bl	80024c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800321a:	e026      	b.n	800326a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d209      	bcs.n	8003248 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3304      	adds	r3, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f7ff f961 	bl	8002508 <vListInsert>
}
 8003246:	e010      	b.n	800326a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <prvAddCurrentTaskToDelayedList+0xc4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7ff f957 	bl	8002508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <prvAddCurrentTaskToDelayedList+0xc8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d202      	bcs.n	800326a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003264:	4a09      	ldr	r2, [pc, #36]	; (800328c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200000f4 	.word	0x200000f4
 8003278:	20000030 	.word	0x20000030
 800327c:	200000f8 	.word	0x200000f8
 8003280:	200000dc 	.word	0x200000dc
 8003284:	200000c4 	.word	0x200000c4
 8003288:	200000c0 	.word	0x200000c0
 800328c:	2000010c 	.word	0x2000010c

08003290 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <pxCurrentTCBConst2>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	6808      	ldr	r0, [r1, #0]
 8003296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	f380 8809 	msr	PSP, r0
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	4770      	bx	lr
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst2>:
 80032b0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
}
 80032d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <vPortEnterCritical+0x58>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <vPortEnterCritical+0x58>)
 80032da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <vPortEnterCritical+0x58>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10f      	bne.n	8003304 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <vPortEnterCritical+0x5c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <vPortEnterCritical+0x4c>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	603b      	str	r3, [r7, #0]
}
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <vPortEnterCritical+0x4a>
	}
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	2000000c 	.word	0x2000000c
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <vPortExitCritical+0x50>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <vPortExitCritical+0x24>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	607b      	str	r3, [r7, #4]
}
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <vPortExitCritical+0x50>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <vPortExitCritical+0x50>)
 8003344:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <vPortExitCritical+0x50>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d105      	bne.n	800335a <vPortExitCritical+0x42>
 800334e:	2300      	movs	r3, #0
 8003350:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f383 8811 	msr	BASEPRI, r3
}
 8003358:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2000000c 	.word	0x2000000c
 800336c:	00000000 	.word	0x00000000

08003370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003370:	f3ef 8009 	mrs	r0, PSP
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <pxCurrentTCBConst>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f01e 0f10 	tst.w	lr, #16
 8003380:	bf08      	it	eq
 8003382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338a:	6010      	str	r0, [r2, #0]
 800338c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003394:	f380 8811 	msr	BASEPRI, r0
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f7ff fce6 	bl	8002d70 <vTaskSwitchContext>
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f380 8811 	msr	BASEPRI, r0
 80033ac:	bc09      	pop	{r0, r3}
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	6808      	ldr	r0, [r1, #0]
 80033b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b6:	f01e 0f10 	tst.w	lr, #16
 80033ba:	bf08      	it	eq
 80033bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033c0:	f380 8809 	msr	PSP, r0
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst>:
 80033d0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	607b      	str	r3, [r7, #4]
}
 80033f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80033f2:	f7ff fc05 	bl	8002c00 <xTaskIncrementTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <xPortSysTickHandler+0x40>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f383 8811 	msr	BASEPRI, r3
}
 800340e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d914      	bls.n	8003458 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <vPortValidateInterruptPriority+0x70>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <vPortValidateInterruptPriority+0x74>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	7afa      	ldrb	r2, [r7, #11]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20a      	bcs.n	8003458 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <vPortValidateInterruptPriority+0x78>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <vPortValidateInterruptPriority+0x7c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90a      	bls.n	800347e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	603b      	str	r3, [r7, #0]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortValidateInterruptPriority+0x60>
	}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e3f0 	.word	0xe000e3f0
 8003490:	20000114 	.word	0x20000114
 8003494:	e000ed0c 	.word	0xe000ed0c
 8003498:	20000118 	.word	0x20000118

0800349c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe feda 	bl	8002264 <USBH_LL_IncTimer>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe ff1e 	bl	8002308 <USBH_LL_Connect>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff33 	bl	800234e <USBH_LL_Disconnect>
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
 80034fc:	4613      	mov	r3, r2
 80034fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe ff53 	bl	80023b2 <USBH_LL_NotifyURBChange>
#endif
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fec8 	bl	80022b8 <USBH_LL_PortEnabled>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fed4 	bl	80022ec <USBH_LL_PortDisabled>
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fb85 	bl	8000c72 <HAL_HCD_Stop>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f808 	bl	8003584 <USBH_Get_USB_Status>
 8003574:	4603      	mov	r3, r0
 8003576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003578:	7bbb      	ldrb	r3, [r7, #14]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d817      	bhi.n	80035c8 <USBH_Get_USB_Status+0x44>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <USBH_Get_USB_Status+0x1c>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b7 	.word	0x080035b7
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035c3 	.word	0x080035c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
    break;
 80035b4:	e00b      	b.n	80035ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80035b6:	2302      	movs	r3, #2
 80035b8:	73fb      	strb	r3, [r7, #15]
    break;
 80035ba:	e008      	b.n	80035ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
    break;
 80035c0:	e005      	b.n	80035ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80035c2:	2302      	movs	r3, #2
 80035c4:	73fb      	strb	r3, [r7, #15]
    break;
 80035c6:	e002      	b.n	80035ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80035c8:	2302      	movs	r3, #2
 80035ca:	73fb      	strb	r3, [r7, #15]
    break;
 80035cc:	bf00      	nop
  }
  return usb_status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d0d      	ldr	r5, [pc, #52]	; (8003614 <__libc_init_array+0x38>)
 80035e0:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	2600      	movs	r6, #0
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	4d0b      	ldr	r5, [pc, #44]	; (800361c <__libc_init_array+0x40>)
 80035ee:	4c0c      	ldr	r4, [pc, #48]	; (8003620 <__libc_init_array+0x44>)
 80035f0:	f000 f826 	bl	8003640 <_init>
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	2600      	movs	r6, #0
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f855 3b04 	ldr.w	r3, [r5], #4
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f855 3b04 	ldr.w	r3, [r5], #4
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08003658 	.word	0x08003658
 8003618:	08003658 	.word	0x08003658
 800361c:	08003658 	.word	0x08003658
 8003620:	0800365c 	.word	0x0800365c

08003624 <memcpy>:
 8003624:	440a      	add	r2, r1
 8003626:	4291      	cmp	r1, r2
 8003628:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800362c:	d100      	bne.n	8003630 <memcpy+0xc>
 800362e:	4770      	bx	lr
 8003630:	b510      	push	{r4, lr}
 8003632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800363a:	4291      	cmp	r1, r2
 800363c:	d1f9      	bne.n	8003632 <memcpy+0xe>
 800363e:	bd10      	pop	{r4, pc}

08003640 <_init>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

0800364c <_fini>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr
